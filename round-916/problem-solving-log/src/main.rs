// A. Журнал решения задач
// Монокарп участвует в соревновании по программированию, в котором 26
//  задач, обозначенных от 'A' до 'Z'. Задачи отсортированы по сложности.
//  Более того, известно, что Монокарп может решить задачу 'A', потратив на нее 1
//  минуту, задачу 'B', потратив на нее 2 минуты, ...,
//  задачу 'Z', потратив на нее 26 минут.
//
// После соревнования вы нашли его журнал соревнования — строку, состоящую из заглавных латинских букв,
// такую, что i-я буква означает, какую задачу Монокарп решал в i-ю минуту соревнования.
// Если Монокарп потратил суммарно достаточно времени на решение задачи, он ее решил.
// Обратите внимание, что Монокарп мог думать о задаче после ее решения.
//
// По журналу соревнования Монокарпа, вычислите количество задач, которые он решил во время соревнования.
//
// Входные данные
// В первой строке записано одно целое число t (1≤t≤100) — количество наборов входных данных.
//
// В первой строке каждого набора входных данных записано одно целое число n (1≤n≤500)
// — продолжительность соревнования в минутах.
//
// Во второй строке записана строка длиной ровно n , состоящая только из заглавных латинских букв,
// — журнал соревнования Монокарпа.
//
//
// Выходные данные
// На каждый набор входных данных выведите одно целое число — количество задач, которые Монокарп решил во время соревнования.

// Пример
// Входные данные:
// 3
// 6
// ACBCBC
// 7
// AAAAFPC
// 22
// FEADBBDFFEDFFFDHHHADCC
//
// Выходные данные:
// 3
// 1
// 4

use std::io;
static ASCII_UPPER: [u8; 26] = [
    b'A', b'B', b'C', b'D', b'E', b'F', b'G', b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O', b'P',
    b'Q', b'R', b'S', b'T', b'U', b'V', b'W', b'X', b'Y', b'Z',
];

fn main() {
    let mut input = String::new();

    io::stdin()
        .read_line(&mut input)
        .expect("Failed input t value");

    let t: u8 = input.trim().parse().expect("t will be a number");

    for _ in 0..t {
        let mut alphavite = Vec::<(u8, u16)>::new();
        for i in 0..26 {
            alphavite.push((ASCII_UPPER[i], 0));
        }

        input.clear();

        io::stdin()
            .read_line(&mut input)
            .expect("Failed input n value");

        let n: u16 = input.trim().parse().expect("n will be a number");

        input.clear();

        io::stdin()
            .read_line(&mut input)
            .expect("Failed input n value");

        let mut counter: u32 = 0;

        for string_index in 0..n {
            let symbol: u8 = input.as_bytes()[string_index as usize];

            let index = (symbol as u8 - b'A') as usize;
            alphavite[index].1 += 1;
        }

        for symb in alphavite {
            let minutes = (symb.0 - b'A' + 1) as u16;
            if symb.1 >= minutes {
                counter += 1;
            }
        }
        println!("{counter}");
    }
}
